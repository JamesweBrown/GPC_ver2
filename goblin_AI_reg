/*
This is called once every second or so (different length of time for each enemy. This spaces out this script between the steps so that it's not being called too many times in one step which could cause framing and slowdown). It updates the enemy AI with either a new path, or an attack.
*/
path_speed = 0;//Reset and clear current path
path_end();
path_clear_points(path);

if (instance_exists(target))
{
	if (target == objHouse)
	{
		//Find node
		var list = ds_list_create();//Create a temporary list
		with(objGoblinAttackNode)
		{
			if (active == noone)//"active" is a var inside objGoblinNode which holds the ID number of the enemy standing on it.
			{
				ds_list_add(list,id);//Add the node to the list
			}
		}
		ds_list_shuffle(list);//Shuffle the list
		if (list[|0] == undefined)//If the first node on the list is "undefined"(this would happen if all the nodes are taken)
		{
			target = objPlayer;//then set the enemy's target to be the player
		}
		else//else if they're not all taken
		{
			target = list[|0];//set the enemy target variable to be that node.
		}
	}

	if (!attacking) && (alarm[2] == -1)//If the enemy isn't attacking
	{
		if (distance_to_object(target) > reach)//If the enemy isn't within attacking range
		{
//Start a path to the target
		mp_grid_path(grid_nav,path,x,y,mean(target.bbox_left,target.bbox_right),mean(target.bbox_bottom,target.bbox_top),0);
			path_start(path,max_speed,path_action_stop,1);
		}
		else
		{
			if (!collision_line(x,y,target.x,target.y,objWallTrees,0,0))//If there isn't a wall in the way
			{
				path_speed = 0;//Stop the enemy movement
				path_end();
				//show_debug_message("Goblin is now attacking!");
				if (alarm[2]) < 0 alarm[2] = wind;//Set the attack timer to the variable "wind"
			}
		}
	}
}
